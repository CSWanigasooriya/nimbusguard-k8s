---
# OpenAI API Key Secret (placeholder - to be created separately)
apiVersion: v1
kind: Secret
metadata:
  name: openai-api-key
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: operator
type: Opaque
data:
  # Replace with base64 encoded OpenAI API key
  # echo -n "sk-your-api-key-here" | base64
  api-key: c2stcGxhY2Vob2xkZXItYXBpLWtleS1oZXJl  # placeholder

---
# LangGraph Operator Service
apiVersion: v1
kind: Service
metadata:
  name: langgraph-operator
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: operator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8082"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8082
    targetPort: 8082
    protocol: TCP
    name: http
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: healthz
  selector:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: operator

---
# LangGraph Operator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: langgraph-operator
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nimbusguard
      app.kubernetes.io/component: operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nimbusguard
        app.kubernetes.io/component: operator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: langgraph-operator
      containers:
      - name: langgraph-operator
        image: nimbusguard/langgraph-operator:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8082
          name: http
          protocol: TCP
        - containerPort: 8080
          name: healthz
          protocol: TCP
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: openai-api-key
              key: api-key
        - name: KOPF_NAMESPACE
          value: "nimbusguard"
        - name: KOPF_LOG_LEVEL
          value: "INFO"
        - name: PROMETHEUS_URL
          value: "http://prometheus-server:9090"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: KAFKA_TOPIC_DECISIONS
          value: "nimbusguard.decisions"
        - name: KAFKA_TOPIC_ACTIONS
          value: "nimbusguard.actions"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_ENABLED
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://tempo:4317"
        - name: OTEL_SERVICE_NAME
          value: "langgraph-operator"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=langgraph-operator,service.version=0.1.0"
        - name: CONFIG_PATH
          value: "/app/config/operator-config.yaml"
        - name: AGENT_PROMPTS_PATH
          value: "/app/prompts"
        - name: Q_LEARNING_MODEL_PATH
          value: "/app/models/q_learning_model.pkl"
        - name: LSTM_MODEL_PATH
          value: "/app/models/lstm_model.h5"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: prompts
          mountPath: /app/prompts
          readOnly: true
        - name: models
          mountPath: /app/models
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: langgraph-operator-config
      - name: prompts
        configMap:
          name: ai-agent-prompts
      - name: models
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      initContainers:
      - name: wait-for-kafka
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z kafka 9092; do echo waiting for kafka; sleep 2; done;']
      - name: wait-for-prometheus
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z prometheus-server 9090; do echo waiting for prometheus; sleep 2; done;']
      - name: wait-for-consumer-workload
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z consumer-workload 8080; do echo waiting for consumer-workload; sleep 2; done;']

---
# Example ScalingPolicy for Consumer Workload
apiVersion: nimbusguard.io/v1
kind: ScalingPolicy
metadata:
  name: consumer-workload-policy
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: scaling-policy
spec:
  target:
    apiVersion: apps/v1
    kind: Deployment
    name: consumer-workload
    namespace: nimbusguard
  scaling:
    minReplicas: 1
    maxReplicas: 20
    cooldownPeriod: 300
    scaleUpFactor: 2.0
    scaleDownFactor: 0.5
  aiConfig:
    qLearning:
      learningRate: 0.1
      discountFactor: 0.95
      epsilonStart: 1.0
      epsilonEnd: 0.01
      epsilonDecay: 0.995
    lstm:
      enabled: false
      predictionWindow: 5
      sequenceLength: 60
  metrics:
    cpu:
      targetUtilization: 70
      threshold: 80
    memory:
      targetUtilization: 80
      threshold: 85
    custom:
    - name: request_rate
      query: rate(http_requests_total{service="consumer-workload"}[5m])
      threshold: 100 