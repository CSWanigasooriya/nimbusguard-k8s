apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-workload
  labels:
    app: consumer-workload
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer-workload
  template:
    metadata:
      labels:
        app: consumer-workload
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: consumer
          image: nimbusguard/consumer-workload:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: metrics
          env:
            - name: LOG_LEVEL
              value: "INFO"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://tempo:4317"
            - name: OTEL_SERVICE_NAME
              value: "consumer-workload"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=consumer-workload,service.version=1.0.0"
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "kafka:9092"
            - name: KAFKA_TOPIC
              value: "scaling-events"
            - name: KAFKA_CONSUMER_GROUP
              value: "background-consumer"
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: consumer-workload
  labels:
    app: consumer-workload
spec:
  selector:
    app: consumer-workload
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/part-of: nimbusguard
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  type: ClusterIP
---
apiVersion: nimbusguard.io/v1alpha1
kind: IntelligentScaling
metadata:
  name: consumer-scaler
  namespace: nimbusguard
spec:
  namespace: nimbusguard
  target_labels:
    app: consumer-workload
  metrics_config:
    prometheus_url: "http://prometheus.monitoring.svc:9090"
    evaluation_interval: 30
    decision_window: "5m"
    metrics:
      - query: nimbusguard_cpu_usage_percent
        threshold: 50
        condition: gt
      - query: nimbusguard_memory_usage_percent
        threshold: 70
        condition: gt