---
# Load Generator Service
apiVersion: v1
kind: Service
metadata:
  name: load-generator
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: load-generator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8081"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: load-generator

---
# Load Generator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: load-generator
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nimbusguard
      app.kubernetes.io/component: load-generator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nimbusguard
        app.kubernetes.io/component: load-generator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: load-generator
      containers:
      - name: load-generator
        image: nimbusguard/load-generator:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8081
          name: http
          protocol: TCP
        env:
        - name: APP_PORT
          value: "8081"
        - name: APP_HOST
          value: "0.0.0.0"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: KAFKA_TOPIC_SCALING_EVENTS
          value: "nimbusguard.scaling.events"
        - name: TARGET_CONSUMER_WORKLOAD_URL
          value: "http://consumer-workload:8080"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_ENABLED
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://tempo:4317"
        - name: OTEL_SERVICE_NAME
          value: "load-generator"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=load-generator,service.version=0.1.0"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: load-generator-config
      initContainers:
      - name: wait-for-kafka
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z kafka 9092; do echo waiting for kafka; sleep 2; done;']
      - name: wait-for-consumer-workload
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z consumer-workload 8080; do echo waiting for consumer-workload; sleep 2; done;'] 