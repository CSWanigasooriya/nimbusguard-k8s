apiVersion: apps/v1
kind: Deployment
metadata:
  name: learner
  labels:
    app.kubernetes.io/name: learner
    app.kubernetes.io/component: training
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: learner
  template:
    metadata:
      labels:
        app.kubernetes.io/name: learner
        app.kubernetes.io/component: training
    spec:
      serviceAccountName: learner-sa
      containers:
      - name: learner
        image: nimbusguard-learner:latest
        imagePullPolicy: Always
        # No ports needed - Kopf operator only connects to K8s API, Redis, and MinIO
        env:
        - name: REDIS_URL
          value: "redis://redis.nimbusguard.svc:6379"
        - name: MINIO_ENDPOINT
          value: "http://minio.nimbusguard.svc:9000"
        - name: PROMETHEUS_URL
          value: "http://prometheus.nimbusguard.svc:9090"
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
        - name: BUCKET_NAME
          value: "models"
        - name: TARGET_NAMESPACE
          value: "nimbusguard"
        - name: SCALEDOBJECT_NAME
          value: "consumer-scaler-dqn"
        - name: PYTHONUNBUFFERED
          value: "1"
        # Enhanced DQN Parameters
        - name: MEMORY_CAPACITY
          value: "50000"
        - name: BATCH_SIZE
          value: "64"
        - name: GAMMA
          value: "0.99"
        - name: LR
          value: "0.0001"
        - name: TARGET_UPDATE_INTERVAL
          value: "1000"
        - name: SAVE_INTERVAL_SECONDS
          value: "300"
        - name: EVALUATION_INTERVAL
          value: "100"
        - name: ALPHA
          value: "0.6"
        - name: BETA
          value: "0.4"
        - name: BETA_INCREMENT
          value: "0.001"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        # No liveness probe needed - Kopf operator manages its own lifecycle
