apiVersion: batch/v1
kind: CronJob
metadata:
  name: load-test-production
  labels:
    load-test: load-test-production
spec:
  schedule: "*/5 * * * *"
  concurrencyPolicy: Forbid         
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: 300
      template:
        metadata:
          labels:
            load-test: load-test-production
        spec:
          restartPolicy: Never
          initContainers:
          - name: wait-for-consumer
            image: curlimages/curl:8.5.0
            command: ["sh", "-c"]
            args:
            - |
              echo "Waiting for consumer service to become healthy…";
              until curl -f -s http://consumer:8000/health > /dev/null; do
                echo "Not ready…sleep 5s"; sleep 5; done; echo "Consumer ready!";
            resources:
              requests: {cpu: "10m", memory: "16Mi"}
              limits:   {cpu: "50m", memory: "32Mi"}
          containers:
          - name: load-generator
            image: nimbusguard-generator:latest
            imagePullPolicy: IfNotPresent
            command: ["bash", "-c"]
            args:
            - |
              # Comprehensive DQN training scenarios
              SCENARIOS=(
                # Cooldown scenarios (0-1 concurrent) - Important for scale-down training
                "cooldown_zero:0:5"
                "cooldown_minimal:1:5"
                "idle_period:0:3"
                "rest_phase:1:8"
                "downtime:0:10"
                "minimal_activity:1:12"
                "quiet_period:0:7"
                "low_activity:1:15"
                "scale_down_test:0:6"
                "baseline_cooldown:1:10"
                
                # Very low load scenarios (2-5 concurrent)
                "minimal_load:2:10"
                "light_load:3:15"
                "low_burst:4:20"
                "small_sustained:5:25"
                
                # Low-medium load scenarios (6-10 concurrent)
                "threshold_test:6:20"
                "medium_light:7:25"
                "steady_medium:8:30"
                "ramp_up:9:35"
                "standard_load:10:40"
                
                # Medium load scenarios (11-15 concurrent)
                "medium_burst:11:25"
                "scaling_point:12:30"
                "moderate_load:13:35"
                "sustained_medium:14:40"
                "peak_medium:15:45"
                
                # Medium-high load scenarios (16-20 concurrent)
                "high_threshold:16:30"
                "heavy_load:17:35"
                "stress_test:18:40"
                "peak_load:19:45"
                "burst_heavy:20:50"
                
                # High load scenarios (21-30 concurrent)
                "extreme_burst:21:35"
                "high_sustained:22:40"
                "stress_sustained:23:45"
                "peak_stress:24:50"
                "max_load:25:55"
                "overload_test:26:40"
                "extreme_load:27:45"
                "heavy_stress:28:50"
                "peak_extreme:29:55"
                "max_stress:30:60"
                
                # Very high load scenarios (31-40 concurrent)
                "overload_burst:31:45"
                "extreme_sustained:32:50"
                "critical_load:33:55"
                "max_capacity:34:60"
                "overload_sustained:35:65"
                "critical_burst:36:50"
                "extreme_stress:37:55"
                "max_overload:38:60"
                "critical_sustained:39:65"
                "peak_overload:40:70"
                
                # Ultra high load scenarios (41-50 concurrent)
                "ultra_burst:41:55"
                "ultra_sustained:42:60"
                "ultra_stress:43:65"
                "ultra_peak:44:70"
                "ultra_max:45:75"
                "mega_burst:46:60"
                "mega_sustained:47:65"
                "mega_stress:48:70"
                "mega_peak:49:75"
                "mega_max:50:80"
                
                # Variable duration scenarios
                "quick_burst:15:20"
                "extended_load:10:80"
                "marathon_test:8:100"
                "sprint_test:25:15"
                "endurance_test:12:90"
                
                # Mixed pattern scenarios
                "pattern_a:6:25"
                "pattern_b:13:30"
                "pattern_c:18:35"
                "pattern_d:23:40"
                "pattern_e:28:45"
                "pattern_f:33:50"
                "pattern_g:7:60"
                "pattern_h:16:70"
                "pattern_i:24:35"
                "pattern_j:31:25"
                
                # Additional cooldown variations for better scale-down training
                "recovery_phase:0:8"
                "post_load_cooldown:1:6"
                "system_rest:0:12"
                "gradual_decline:2:10"
                "wind_down:1:20"
              )
              
              # Number of scenarios to run (3-5 random scenarios per job)
              NUM_SCENARIOS=$((3 + RANDOM % 3))  # Random between 3-5
              echo "Running $NUM_SCENARIOS random scenarios in this job"
              
              # Shuffle scenarios and pick the first NUM_SCENARIOS
              SELECTED_SCENARIOS=($(printf '%s\n' "${SCENARIOS[@]}" | shuf | head -n $NUM_SCENARIOS))
              
              for i in "${!SELECTED_SCENARIOS[@]}"; do
                SCENARIO=${SELECTED_SCENARIOS[$i]}
                IFS=':' read -r TEST_NAME CONCURRENT TOTAL <<< "$SCENARIO"
                
                # Random delay between requests
                DELAY_OPTIONS=(0.5 1.0 1.5 2.0)
                DELAY=${DELAY_OPTIONS[$((RANDOM%${#DELAY_OPTIONS[@]}))]}
                
                echo ""
                echo "=== Scenario $((i+1))/$NUM_SCENARIOS: $TEST_NAME ==="
                echo "Concurrent: $CONCURRENT | Total: $TOTAL | Delay: ${DELAY}s"
                
                # Run the load test
                python load_generator.py \
                  --url=http://consumer:8000 \
                  --concurrent=$CONCURRENT \
                  --total=$TOTAL \
                  --delay=$DELAY
                
                # Brief pause between scenarios (except for the last one)
                if [ $((i+1)) -lt $NUM_SCENARIOS ]; then
                  echo "Pausing 10s between scenarios..."
                  sleep 10
                fi
              done
              
              echo ""
              echo "✅ Completed $NUM_SCENARIOS scenarios successfully"
            resources:
              requests: {cpu: "100m", memory: "128Mi"}
              limits:   {cpu: "300m", memory: "256Mi"}