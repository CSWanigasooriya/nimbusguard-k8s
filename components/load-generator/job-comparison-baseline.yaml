apiVersion: batch/v1
kind: Job
metadata:
  name: load-test-4phase-continuous-hpa
  namespace: nimbusguard
  labels:
    load-test: 4phase-continuous-hpa
    experiment: continuous-scaling-test
spec:
  template:
    metadata:
      labels:
        load-test: 4phase-hpa-scaling
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-consumer
        image: curlimages/curl:8.5.0
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for consumer service to be ready..."
          until curl -f -s http://consumer:8000/health > /dev/null; do
            echo "Consumer not ready, waiting 5 seconds..."
            sleep 5
          done
          echo "Consumer service is ready!"
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
      containers:
      - name: load-generator
        image: nimbusguard-generator:latest
        imagePullPolicy: Always
        command: ['bash', '-c']
        args:
        - |-
          echo "üéØ Starting 4-Phase Continuous HPA Scaling Test"
          echo "üîß Resource Model: 25m CPU, 75MB memory per request"
          echo "üìä HPA Thresholds: 140m CPU (70% of 200m), 410MB memory (80% of 512Mi)"
          echo "‚öñÔ∏è  HPA Trigger Point: ~6 requests per pod (6*25m=150m CPU, 6*75MB=450MB)"
          echo "üé≤ Deterministic seed: 12345 for consistent results"
          echo "‚ö° Continuous phases - no delays between transitions"
          echo ""

          # Record start time
          START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "üïê Test started at: $START_TIME"
          echo ""

          # Phase 1: Warm-up (Below HPA threshold)
          echo "üìä PHASE 1: Warm-up (Below HPA Threshold)"
          echo "  Goal: Establish baseline load without triggering HPA"
          echo "  Load: 4 concurrent requests, 40 total requests, 3s delay"
          echo "  Expected CPU: 4 * 25m = 100m (below 140m threshold)"
          echo "  Expected Memory: 4 * 75MB = 300MB (below 410MB threshold)"
          echo "  HPA Status: Should remain at 2 replicas"
          echo ""

          python load_generator.py \
            --url=http://consumer:8000 \
            --test-name="Phase 1: Warm-up" \
            --description="Baseline load below HPA thresholds" \
            --concurrent=4 \
            --total=40 \
            --delay=3.0 \
            --async-mode \
            --seed=12345

          echo "‚è±Ô∏è Phase 1 complete. Starting Phase 2 immediately..."

          # Phase 2: Gradual Ramp-up (Trigger HPA)
          echo "üìä PHASE 2: Gradual Ramp-up (Trigger HPA)"
          echo "  Goal: Cross HPA threshold and trigger initial scaling"
          echo "  Load: 8 concurrent requests, 60 total requests, 2s delay"
          echo "  Expected CPU: 8 * 25m = 200m (above 140m threshold)"
          echo "  Expected Memory: 8 * 75MB = 600MB (above 410MB threshold)"
          echo "  HPA Status: Should scale to 3-4 replicas"
          echo ""

          python load_generator.py \
            --url=http://consumer:8000 \
            --test-name="Phase 2: Gradual Ramp-up" \
            --description="Cross HPA threshold and trigger scaling" \
            --concurrent=8 \
            --total=60 \
            --delay=2.0 \
            --async-mode \
            --seed=12346

          echo "‚è±Ô∏è Phase 2 complete. Starting Phase 3 immediately..."

          # Phase 3: Peak Load (High scaling)
          echo "üìä PHASE 3: Peak Load (High Scaling)"
          echo "  Goal: Test maximum scaling capability under peak load"
          echo "  Load: 15 concurrent requests, 90 total requests, 1.5s delay"
          echo "  Expected CPU: 15 * 25m = 375m (requires multiple pods)"
          echo "  Expected Memory: 15 * 75MB = 1125MB (requires multiple pods)"
          echo "  HPA Status: Should scale to 5-6 replicas"
          echo ""

          python load_generator.py \
            --url=http://consumer:8000 \
            --test-name="Phase 3: Peak Load" \
            --description="High load requiring maximum scaling" \
            --concurrent=15 \
            --total=90 \
            --delay=1.5 \
            --async-mode \
            --seed=12347

          echo "‚è±Ô∏è Phase 3 complete. Starting Phase 4 immediately..."

          # Phase 4: Gradual Cooldown (Scale-down observation)
          echo "üìä PHASE 4: Gradual Cooldown (Scale-down)"
          echo "  Goal: Observe gradual scale-down behavior"
          echo "  Load: 3 concurrent requests, 30 total requests, 4s delay"
          echo "  Expected CPU: 3 * 25m = 75m (below 140m threshold)"
          echo "  Expected Memory: 3 * 75MB = 225MB (below 410MB threshold)"
          echo "  HPA Status: Should gradually scale back down to 2 replicas"
          echo ""

          python load_generator.py \
            --url=http://consumer:8000 \
            --test-name="Phase 4: Gradual Cooldown" \
            --description="Gradual scale-down back to baseline" \
            --concurrent=3 \
            --total=30 \
            --delay=4.0 \
            --async-mode \
            --seed=12348

          echo "‚è±Ô∏è Phase 4 complete. Test finished."

          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo ""
          echo "‚úÖ 4-Phase Continuous HPA Scaling Test Complete!"
          echo "üïê Test finished at: $END_TIME"
          echo ""
          echo "üìä Phase Summary (Continuous Transitions):"
          echo "  Phase 1: Warm-up     (4 concurrent)  - Below HPA threshold"
          echo "  Phase 2: Ramp-up     (8 concurrent)  - Trigger HPA scaling"
          echo "  Phase 3: Peak Load   (15 concurrent) - Maximum scaling"
          echo "  Phase 4: Cooldown    (3 concurrent)  - Scale-down observation"
          echo ""
          echo "üîß Resource Model: 25m CPU, 75MB Memory per request"
          echo "üìà HPA Thresholds: 140m CPU, 410MB Memory per pod"
          echo "‚öñÔ∏è  HPA Trigger Point: ~6 requests per pod"
          echo "‚ö° Continuous transitions allow real-time HPA response observation"
          echo ""
          echo "üîç Post-Test Analysis Commands:"
          echo "  kubectl describe hpa consumer-hpa -n nimbusguard"
          echo "  kubectl get pods -l app.kubernetes.io/name=consumer -n nimbusguard"
          echo "  kubectl top pods -l app.kubernetes.io/name=consumer -n nimbusguard"
          echo "  kubectl get events -n nimbusguard --sort-by='.lastTimestamp'"
          echo ""
          echo "üìã Expected Scaling Pattern (Continuous):"
          echo "  ‚Ä¢ Start: 2 replicas (minimum)"
          echo "  ‚Ä¢ Phase 1: Remain at 2 replicas (load below threshold)"
          echo "  ‚Ä¢ Phase 2‚Üí3: Continuous scale-up to 5-6 replicas"
          echo "  ‚Ä¢ Phase 4: Scale-down back to 2 replicas"
          echo ""
          echo "‚úÖ Continuous test data available for HPA behavior analysis!"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
  backoffLimit: 1
  # Total duration without delays: ~6 + 8 + 9 + 8 = ~31 minutes
  activeDeadlineSeconds: 2400  # 40 minutes for safety buffer
