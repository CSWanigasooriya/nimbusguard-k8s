apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer-workload
  namespace: nimbusguard
  labels:
    app: consumer-workload
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/part-of: nimbusguard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer-workload
      app.kubernetes.io/component: operator
      app.kubernetes.io/name: nimbusguard
      app.kubernetes.io/part-of: nimbusguard
  template:
    metadata:
      labels:
        app: consumer-workload
        app.kubernetes.io/component: operator
        app.kubernetes.io/name: nimbusguard
        app.kubernetes.io/part-of: nimbusguard
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        instrumentation.opentelemetry.io/inject-python: "true"
        loki.io/collect: "true"
        nimbusguard.io/dqn-target: "true"
    spec:
      containers:
        - name: consumer
          image: nimbusguard/consumer-workload:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: LOG_LEVEL
              value: "INFO"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://alloy.monitoring.svc.cluster.local:4317"
            - name: OTEL_SERVICE_NAME
              value: "nimbusguard-consumer-workload"
            - name: OTEL_SERVICE_VERSION
              value: "v1"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=nimbusguard-consumer-workload,service.version=v1,deployment.environment=default"
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "kafka:9092"
            - name: KAFKA_TOPIC
              value: "scaling-events"
            - name: KAFKA_CONSUMER_GROUP
              value: "background-consumer"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
            - name: CPU_LIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /live
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 30

---
apiVersion: v1
kind: Service
metadata:
  name: consumer-workload
  namespace: nimbusguard
  labels:
    app: consumer-workload
    version: v1
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
    nimbusguard.io/dqn-target: "true"
spec:
  selector:
    app: consumer-workload
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/part-of: nimbusguard
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  type: ClusterIP

---
# IntelligentScaling resource
apiVersion: nimbusguard.io/v1alpha1
kind: IntelligentScaling
metadata:
  name: consumer-workload-dqn
  namespace: nimbusguard
  labels:
    app: consumer-workload
    autoscaler: dqn
spec:
  namespace: nimbusguard
  target_labels:
    app: consumer-workload
    app.kubernetes.io/component: operator
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/part-of: nimbusguard
  minReplicas: 2
  maxReplicas: 20

  metrics_config:
    prometheus_url: "http://prometheus.monitoring.svc.cluster.local:9090"
    tempo_url: "http://tempo.monitoring.svc.cluster.local:3200"
    loki_url: "http://loki.monitoring.svc.cluster.local:3100"


    feature_collection:
      lookback_minutes: 5

  ml_config:
    training_mode: true
    model_path: "/models/consumer-workload-dqn.pth"
    epsilon_start: 0.1
    confidence_threshold: 0.3

  evaluation_config:
    evaluation_interval: 30
    trace_decisions: true