---
# OpenTelemetry Collector ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: otel-collector
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_binary:
            endpoint: 0.0.0.0:6832
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: ['0.0.0.0:8888']
      
    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
      memory_limiter:
        limit_mib: 512
        check_interval: 1s
      resource:
        attributes:
          - key: service.name
            action: upsert
            from_attribute: service_name
          - key: service.version
            action: upsert
            from_attribute: service_version
      
    exporters:
      # Export traces to Tempo
      otlp/tempo:
        endpoint: http://tempo:4317
        tls:
          insecure: true
      
      # Export metrics to Prometheus
      prometheus:
        endpoint: "0.0.0.0:8889"
        
      # Export logs to Loki
      loki:
        endpoint: http://loki:3100/loki/api/v1/push
        
      # Debug exporter for development
      logging:
        loglevel: debug
        
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679
        
    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [memory_limiter, resource, batch]
          exporters: [otlp/tempo, logging]
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, resource, batch]
          exporters: [prometheus, logging]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource, batch]
          exporters: [loki, logging]

---
# OpenTelemetry Collector Service
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: otel-collector
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8889"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  # OTLP receivers
  - port: 4317
    targetPort: 4317
    protocol: TCP
    name: otlp-grpc
  - port: 4318
    targetPort: 4318
    protocol: TCP
    name: otlp-http
  # Jaeger receivers
  - port: 14250
    targetPort: 14250
    protocol: TCP
    name: jaeger-grpc
  - port: 14268
    targetPort: 14268
    protocol: TCP
    name: jaeger-http
  - port: 6831
    targetPort: 6831
    protocol: UDP
    name: jaeger-compact
  - port: 6832
    targetPort: 6832
    protocol: UDP
    name: jaeger-binary
  # Metrics export
  - port: 8889
    targetPort: 8889
    protocol: TCP
    name: prometheus
  # Management
  - port: 13133
    targetPort: 13133
    protocol: TCP
    name: health-check
  - port: 55679
    targetPort: 55679
    protocol: TCP
    name: zpages
  selector:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: otel-collector

---
# OpenTelemetry Collector Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: otel-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nimbusguard
      app.kubernetes.io/component: otel-collector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nimbusguard
        app.kubernetes.io/component: otel-collector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8889"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:0.85.0
        args:
        - --config=/etc/otel-collector-config.yaml
        ports:
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        - containerPort: 14250
          name: jaeger-grpc
        - containerPort: 14268
          name: jaeger-http
        - containerPort: 6831
          name: jaeger-compact
          protocol: UDP
        - containerPort: 6832
          name: jaeger-binary
          protocol: UDP
        - containerPort: 8889
          name: prometheus
        - containerPort: 13133
          name: health-check
        - containerPort: 55679
          name: zpages
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /etc/otel-collector-config.yaml
          subPath: otel-collector-config.yaml
      volumes:
      - name: config
        configMap:
          name: otel-collector-config 