# ============================================================================
# KEDA SCALEDOBJECT BASELINE CONFIGURATION
# Uses same Prometheus metrics as DQN system with per-replica utilization calculation
# ============================================================================
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-scaler-baseline
  labels:
    component: consumer
    evaluation: baseline
    research: "true"
    test-scenario: "keda-baseline"
  annotations:
    research.note: "KEDA baseline using per-replica utilization calculation - fair comparison with HPA"
spec:
  scaleTargetRef:
    name: consumer
  minReplicaCount: 2
  maxReplicaCount: 50
  pollingInterval: 15        # Match HPA evaluation period
  cooldownPeriod: 15         # Fast response like HPA
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 30  # Reduce from default 300s to 30s
          selectPolicy: Max
          policies:
          - type: Pods
            value: 2
            periodSeconds: 15
          - type: Percent
            value: 50
            periodSeconds: 15
        scaleDown:
          stabilizationWindowSeconds: 30  # Conservative scale down
          selectPolicy: Min
          policies:
          - type: Pods
            value: 1
            periodSeconds: 30
  triggers:
    # CPU-based scaling using per-replica utilization (same as HPA)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: cpu_utilization_per_replica
        query: '(sum(rate(process_cpu_seconds_total{job=~"prometheus.scrape.annotated_pods", instance=~".*:8000"}[15s])) or vector(0)) / (sum(kube_deployment_status_replicas{deployment="consumer", job="prometheus.scrape.annotated_pods", namespace="nimbusguard"}) or vector(1))'
        threshold: '0.2'  
    
    # Memory-based scaling using per-replica utilization (same as HPA)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: memory_utilization_per_replica
        query: '(sum(process_resident_memory_bytes{job=~"prometheus.scrape.annotated_pods", instance=~".*:8000"}) or vector(0)) / (sum(kube_deployment_status_replicas{deployment="consumer", job="prometheus.scrape.annotated_pods", namespace="nimbusguard"}) or vector(1)) / 536870912'
        threshold: '0.2' 
