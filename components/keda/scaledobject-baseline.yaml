# ============================================================================
# KEDA SCALEDOBJECT BASELINE CONFIGURATION
# Uses same 9 metrics as DQN with static thresholds for fair comparison
# ============================================================================
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-scaler-baseline
  labels:
    component: consumer
    evaluation: baseline
    research: "true"
    test-scenario: "keda-baseline"
  annotations:
    research.note: "KEDA baseline using same 9 metrics as DQN - fair comparison with static thresholds vs AI decisions"
spec:
  scaleTargetRef:
    name: consumer
  minReplicaCount: 1
  maxReplicaCount: 50
  pollingInterval: 15        # Match DQN decision interval
  cooldownPeriod: 30         # Match DQN stabilization period
  triggers:
    # Primary trigger: Scale up when containers are not ready (DQN feature: kube_pod_container_status_ready)
    # This replicates the DQN system's focus on container readiness
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: container_readiness_ratio
        threshold: '0.8'  # Scale up when < 80% of containers are ready (stress condition)
        query: |
          sum(kube_pod_container_status_ready{namespace="nimbusguard",pod=~"consumer-.*"}) / sum(kube_deployment_spec_replicas{deployment="consumer",namespace="nimbusguard"})
    
    # Secondary trigger: Scale up when replicas are unavailable (DQN feature: kube_deployment_status_replicas_unavailable)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: unavailable_replicas
        threshold: '1'  # Scale up if any replica is unavailable
        query: |
          max(kube_deployment_status_replicas_unavailable{deployment="consumer",namespace="nimbusguard"}) or vector(0) 