---
# KEDA ScaledObject for Consumer Workload based on Kafka topic lag
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-workload-kafka-scaler
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: keda-scaler
spec:
  scaleTargetRef:
    name: consumer-workload
  pollingInterval: 30
  cooldownPeriod: 300
  idleReplicaCount: 1
  minReplicaCount: 1
  maxReplicaCount: 10
  triggers:
  - type: kafka
    metadata:
      bootstrapServers: kafka:9092
      consumerGroup: nimbusguard-consumer-workload
      topic: nimbusguard.scaling.events
      lagThreshold: '5'
      offsetResetPolicy: latest
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-server:9090
      metricName: consumer_workload_cpu_usage
      threshold: '70'
      query: avg(rate(container_cpu_usage_seconds_total{pod=~"consumer-workload.*"}[5m])) * 100

---
# KEDA ScaledObject for high memory pressure
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-workload-memory-scaler
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: keda-scaler
spec:
  scaleTargetRef:
    name: consumer-workload
  pollingInterval: 30
  cooldownPeriod: 600
  idleReplicaCount: 1
  minReplicaCount: 1
  maxReplicaCount: 15
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-server:9090
      metricName: consumer_workload_memory_usage
      threshold: '80'
      query: avg(container_memory_usage_bytes{pod=~"consumer-workload.*"}) / avg(container_spec_memory_limit_bytes{pod=~"consumer-workload.*"}) * 100

---
# KEDA TriggerAuthentication for Kafka (if auth needed)
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: kafka-trigger-auth
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: keda-auth
spec:
  # For now, no authentication required for local Kafka
  # In production, add SASL/SSL configurations here
  secretTargetRef: []

---
# KEDA ScaledObject for request rate scaling
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-workload-request-scaler
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: keda-scaler
spec:
  scaleTargetRef:
    name: consumer-workload
  pollingInterval: 15
  cooldownPeriod: 180
  idleReplicaCount: 1
  minReplicaCount: 1
  maxReplicaCount: 25
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-server:9090
      metricName: consumer_workload_request_rate
      threshold: '50'
      query: sum(rate(http_requests_total{service="consumer-workload"}[2m]))

---
# KEDA ScaledJob for batch processing (example for future use)
apiVersion: keda.sh/v1alpha1
kind: ScaledJob
metadata:
  name: nimbusguard-ml-training-job
  namespace: nimbusguard
  labels:
    app.kubernetes.io/name: nimbusguard
    app.kubernetes.io/component: keda-job
spec:
  jobTargetRef:
    template:
      spec:
        template:
          spec:
            containers:
            - name: ml-trainer
              image: nimbusguard/ml-trainer:latest
              command: ["python", "train_model.py"]
            restartPolicy: Never
        backoffLimit: 4
  pollingInterval: 300
  maxReplicaCount: 3
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  triggers:
  - type: kafka
    metadata:
      bootstrapServers: kafka:9092
      consumerGroup: nimbusguard-ml-training
      topic: nimbusguard.ml.training
      lagThreshold: '1' 