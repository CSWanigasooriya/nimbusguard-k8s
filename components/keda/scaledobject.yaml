# Traditional reactive ScaledObject with fixed Prometheus thresholds
# This stays as a reference/backup approach
# ---
# apiVersion: keda.sh/v1alpha1
# kind: ScaledObject
# metadata:
#   name: consumer-scaler-traditional
# spec:
#   scaleTargetRef:
#     name: consumer
#   minReplicaCount: 1
#   maxReplicaCount: 50
#   pollingInterval: 30
#   cooldownPeriod: 5
#   triggers:
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc:9090
#         metricName: http_request_rate
#         threshold: '5'
#         query: |
#           sum(rate(http_requests_total{handler="/process",job="prometheus.scrape.annotated_pods",method="POST"}[1m]))
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc:9090
#         metricName: http_request_duration
#         threshold: '2'
#         query: |
#           sum(rate(http_request_duration_seconds_sum{handler="/process",job="prometheus.scrape.annotated_pods",method="POST"}[1m])) / sum(rate(http_request_duration_seconds_count{handler="/process",job="prometheus.scrape.annotated_pods",method="POST"}[1m]))
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc:9090
#         metricName: python_gc_pressure
#         threshold: '0.5'
#         query: |
#           sum(rate(python_gc_collections_total{job="prometheus.scrape.annotated_pods"}[2m]))
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc.cluster.local:9090
#         metricName: process_cpu_usage_percent
#         threshold: '50'
#         query: |
#           avg(rate(process_cpu_seconds_total{instance="consumer:8000"}[3m])) * 100
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc.cluster.local:9090
#         metricName: process_memory_usage_mb
#         threshold: '300'
#         query: |
#           quantile_over_time(0.95, process_resident_memory_bytes{instance="consumer:8000"}[5m]) / 1024 / 1024 

---
# DQN-Driven Intelligent ScaledObject - SPEED OPTIMIZED
# Fast polling with disabled LLM validation for competitive response times
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-scaler-dqn
  labels:
    app: nimbusguard
    component: keda-dqn
    environment: development
    research: "baseline-matched"
spec:
  scaleTargetRef:
    name: consumer
  minReplicaCount: 1
  maxReplicaCount: 50              # Match baseline
  # SPEED OPTIMIZED: Fast polling for competitive response times
  pollingInterval: 5               # Fast polling (was 30s baseline)
  cooldownPeriod: 1                # Minimal cooldown (was 5s baseline)
  
  # Using default scaling behavior for maximum speed
  # Custom behavior removed to eliminate any additional delays
  
  triggers:
    # DQN decision integration via KEDA Metrics API
    - type: metrics-api
      metadata:
        targetValue: "1"                 # Scale to match DQN's desired replica count
        activationTargetValue: "0.1"     # Activate scaling when DQN suggests > 0.1 replicas  
        url: "http://dqn-adapter.nimbusguard.svc:8080/api/v1/dqn-metrics"
        valueLocation: "dqn.desired_replicas"  # GJSON path to extract the metric value 