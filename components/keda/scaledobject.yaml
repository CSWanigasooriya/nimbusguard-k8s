# Traditional reactive ScaledObject with fixed Prometheus thresholds
# This stays as a reference/backup approach
# ---
# apiVersion: keda.sh/v1alpha1
# kind: ScaledObject
# metadata:
#   name: consumer-scaler-traditional
# spec:
#   scaleTargetRef:
#     name: consumer
#   minReplicaCount: 1
#   maxReplicaCount: 50
#   pollingInterval: 30
#   cooldownPeriod: 5
#   triggers:
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc:9090
#         metricName: http_request_rate
#         threshold: '5'
#         query: |
#           sum(rate(http_requests_total{handler="/process",job="prometheus.scrape.annotated_pods",method="POST"}[1m]))
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc:9090
#         metricName: http_request_duration
#         threshold: '2'
#         query: |
#           sum(rate(http_request_duration_seconds_sum{handler="/process",job="prometheus.scrape.annotated_pods",method="POST"}[1m])) / sum(rate(http_request_duration_seconds_count{handler="/process",job="prometheus.scrape.annotated_pods",method="POST"}[1m]))
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc:9090
#         metricName: python_gc_pressure
#         threshold: '0.5'
#         query: |
#           sum(rate(python_gc_collections_total{job="prometheus.scrape.annotated_pods"}[2m]))
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc.cluster.local:9090
#         metricName: process_cpu_usage_percent
#         threshold: '50'
#         query: |
#           avg(rate(process_cpu_seconds_total{instance="consumer:8000"}[3m])) * 100
#     - type: prometheus
#       metadata:
#         serverAddress: http://prometheus.nimbusguard.svc.cluster.local:9090
#         metricName: process_memory_usage_mb
#         threshold: '300'
#         query: |
#           quantile_over_time(0.95, process_resident_memory_bytes{instance="consumer:8000"}[5m]) / 1024 / 1024 

---
# DQN-Driven Real-Time Intelligent ScaledObject using KEDA Metrics API
# Optimized for sub-20 second response times with aggressive real-time scaling
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-scaler-dqn
  labels:
    app: nimbusguard
    component: keda-dqn
    environment: development
spec:
  scaleTargetRef:
    name: consumer
  minReplicaCount: 1
  maxReplicaCount: 50
  # REAL-TIME CONFIGURATION: Aggressive polling for <20 second response
  pollingInterval: 5    # Check DQN decisions every 5 seconds (was 30)
  cooldownPeriod: 10    # Minimal cooldown for responsive scaling (was 30)
  idleReplicaCount: 1   # Scale to 1 when no load detected
  
  # Advanced real-time scaling behavior
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleUp:
          # Aggressive scale-up for performance
          stabilizationWindowSeconds: 5  # React quickly to load spikes
          selectPolicy: Max              # Use most aggressive policy
          policies:
          - type: Percent
            value: 100                   # Scale up by 100% immediately
            periodSeconds: 5             # Re-evaluate every 5 seconds
          - type: Pods  
            value: 5                     # Or add 5 pods max per cycle
            periodSeconds: 5
        scaleDown:
          # Conservative scale-down to prevent thrashing
          stabilizationWindowSeconds: 30  # Wait 30s before scaling down
          selectPolicy: Min               # Use most conservative policy
          policies:
          - type: Percent
            value: 25                     # Scale down by max 25% at a time
            periodSeconds: 15             # Re-evaluate every 15 seconds
          - type: Pods
            value: 2                      # Or remove max 2 pods per cycle
            periodSeconds: 15
  
  triggers:
    # Real-time DQN decision integration via KEDA Metrics API
    - type: metrics-api
      metadata:
        targetValue: "1"                 # Scale to match DQN's desired replica count
        activationTargetValue: "0.1"     # Activate scaling when DQN suggests > 0.1 replicas  
        url: "http://dqn-adapter.nimbusguard.svc:8080/api/v1/dqn-metrics"
        valueLocation: "dqn.desired_replicas"  # GJSON path to extract the metric value 