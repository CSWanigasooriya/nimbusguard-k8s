# ============================================================================
# KEDA SCALEDOBJECT ENHANCED CONFIGURATION  
# Uses EXACT same 9 raw metric queries as DQN system for perfectly fair comparison
# Thresholds based on actual consumer resource allocation: 0.5 CPU cores + 1GB memory per replica
# ============================================================================
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-scaler-enhanced
  labels:
    component: consumer
    evaluation: enhanced
    research: "true"
    test-scenario: "keda-enhanced"
  annotations:
    research.note: "KEDA enhanced using EXACT same raw metric queries as DQN - perfectly aligned comparison with realistic thresholds"
spec:
  scaleTargetRef:
    name: consumer
  minReplicaCount: 1
  maxReplicaCount: 50
  pollingInterval: 15        # Match DQN decision interval
  cooldownPeriod: 15         # Fast response like HPA baseline
  triggers:
    # Metric 1: kube_deployment_status_replicas_unavailable (EXACT DQN query)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: kube_deployment_status_replicas_unavailable
        threshold: '1'  # Scale up if any replica is unavailable
        query: |
          max(kube_deployment_status_replicas_unavailable{deployment="consumer",namespace="nimbusguard"}) or vector(0)
    
    # Metric 2: kube_pod_container_status_ready (EXACT DQN query - raw count)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: kube_pod_container_status_ready
        threshold: '2'  # Scale up when < 2 ready containers (minimum viable)
        query: |
          count(count by (pod) (kube_pod_container_status_ready{namespace="nimbusguard",pod=~"consumer-.*"} == 1)) or vector(0)
    
    # Metric 3: kube_deployment_spec_replicas (EXACT DQN query)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: kube_deployment_spec_replicas
        threshold: '8'  # Scale up when desired replicas > 8 (high load indicator)
        query: |
          max(kube_deployment_spec_replicas{deployment="consumer",namespace="nimbusguard"}) or vector(1)
    
    # Metric 4: kube_pod_container_status_running (EXACT DQN query - raw count)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: kube_pod_container_status_running
        threshold: '2'  # Scale up when < 2 running containers (minimum viable)
        query: |
          count(count by (pod) (kube_pod_container_status_running{namespace="nimbusguard",pod=~"consumer-.*"} == 1)) or vector(0)
    
    # Metric 5: kube_deployment_status_observed_generation (EXACT DQN query)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: kube_deployment_status_observed_generation
        threshold: '10'  # Scale when generation > 10 (informational trigger)
        query: |
          max(kube_deployment_status_observed_generation{deployment="consumer",namespace="nimbusguard"}) or vector(1)
    
    # Metric 6: kube_pod_container_resource_limits_cpu (EXACT DQN query)
    # Based on 0.5 cores per replica: 4 replicas = 2.0 cores, 6 replicas = 3.0 cores
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: kube_pod_container_resource_limits_cpu
        threshold: '2.5'  # Scale up when total CPU allocation > 2.5 cores (5+ replicas)
        query: |
          sum(sum by (pod) (kube_pod_container_resource_limits{resource="cpu",namespace="nimbusguard",pod=~"consumer-.*"})) or vector(0.25)
    
    # Metric 7: kube_pod_container_resource_limits_memory (EXACT DQN query)
    # Based on 1GB per replica: 3 replicas = 3GB, 4 replicas = 4GB
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: kube_pod_container_resource_limits_memory
        threshold: '3221225472'  # Scale up when total memory allocation > 3GB (3+ replicas)
        query: |
          sum(sum by (pod) (kube_pod_container_resource_limits{resource="memory",namespace="nimbusguard",pod=~"consumer-.*"})) or vector(268435456)
    
    # Metric 8: node_network_up (EXACT DQN query - raw sum)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: node_network_up
        threshold: '0.5'  # Scale up when network health < 0.5
        query: |
          sum(up{job=~".*node.*"}) or sum(up{job="node-exporter"}) or sum(node_network_up) or vector(1)
    
    # Metric 9: kube_pod_container_status_last_terminated_exitcode (EXACT DQN query)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: kube_pod_container_status_last_terminated_exitcode
        threshold: '1'  # Scale up if any container has failed (exit code > 0)
        query: |
          max(kube_pod_container_status_last_terminated_exitcode{namespace="nimbusguard",pod=~"consumer-.*"}) or vector(0) 