# ============================================================================
# KEDA SCALEDOBJECT ENHANCED CONFIGURATION  
# Comprehensive metrics using all 9 DQN features with static thresholds
# ============================================================================
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: consumer-scaler-enhanced
  labels:
    component: consumer
    evaluation: enhanced
    research: "true"
    test-scenario: "keda-enhanced"
  annotations:
    research.note: "KEDA enhanced using all 9 DQN metrics with static thresholds - comprehensive application-aware scaling"
spec:
  scaleTargetRef:
    name: consumer
  minReplicaCount: 1
  maxReplicaCount: 50
  pollingInterval: 15
  cooldownPeriod: 30
  triggers:
    # Metric 1: kube_deployment_status_replicas_unavailable
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: unavailable_replicas
        threshold: '1'
        query: |
          max(kube_deployment_status_replicas_unavailable{deployment="consumer",namespace="nimbusguard"}) or vector(0)
    
    # Metric 2: kube_pod_container_status_ready (inverted - scale when NOT ready)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: unready_containers
        threshold: '1'
        query: |
          sum(kube_pod_container_status_ready{namespace="nimbusguard",pod=~"consumer-.*"} == 0) or vector(0)
    
    # Metric 3: kube_deployment_spec_replicas (current vs desired replica ratio)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: replica_deficit
        threshold: '0.8'
        query: |
          1 - (sum(kube_deployment_status_replicas{deployment="consumer",namespace="nimbusguard"}) / sum(kube_deployment_spec_replicas{deployment="consumer",namespace="nimbusguard"}))
    
    # Metric 4 & 5: Resource limits utilization (CPU + Memory)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: cpu_limit_pressure
        threshold: '3'  # Scale up when total CPU allocation > 3 cores
        query: |
          sum(kube_pod_container_resource_limits{namespace="nimbusguard",pod=~"consumer-.*",resource="cpu"})
    
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: memory_limit_pressure_gb
        threshold: '6'  # Scale up when total memory allocation > 6GB
        query: |
          sum(kube_pod_container_resource_limits{namespace="nimbusguard",pod=~"consumer-.*",resource="memory"}) / 1024 / 1024 / 1024
    
    # Metric 6: kube_pod_container_status_running (scale when containers not running)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: non_running_containers
        threshold: '1'
        query: |
          sum(kube_pod_container_status_running{namespace="nimbusguard",pod=~"consumer-.*"} == 0) or vector(0)
    
    # Metric 7: kube_deployment_status_observed_generation (deployment sync status)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: deployment_out_of_sync
        threshold: '1'
        query: |
          abs(kube_deployment_metadata_generation{deployment="consumer",namespace="nimbusguard"} - 
          kube_deployment_status_observed_generation{deployment="consumer",namespace="nimbusguard"}) or vector(0)
    
    # Metric 8: node_network_up (network health)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: network_down_interfaces
        threshold: '1'
        query: |
          sum(node_network_up == 0) or vector(0)
    
    # Metric 9: kube_pod_container_status_last_terminated_exitcode (container health)
    - type: prometheus
      metadata:
        serverAddress: http://prometheus.nimbusguard.svc:9090
        metricName: container_failures
        threshold: '1'
        query: |
          sum(kube_pod_container_status_last_terminated_exitcode{namespace="nimbusguard",pod=~"consumer-.*"} > 0) or vector(0) 