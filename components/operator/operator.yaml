---
# Operator Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nimbusguard-operator
  namespace: nimbusguard
---
# Operator Cluster Role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nimbusguard-operator
rules:
  - apiGroups: [ "apiextensions.k8s.io" ]
    resources: [ "customresourcedefinitions" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "nimbusguard.io" ]
    resources: [ "intelligentscaling" ]
    verbs: [ "get", "list", "watch", "create", "update", "patch", "delete" ]
  - apiGroups: [ "nimbusguard.io" ]
    resources: [ "intelligentscaling/status" ]
    verbs: [ "get", "update", "patch" ]
  - apiGroups: [ "apps" ]
    resources: [ "deployments", "statefulsets" ]
    verbs: [ "get", "list", "watch", "update", "patch" ]
  - apiGroups: [ "apps" ]
    resources: [ "deployments/scale", "statefulsets/scale" ]
    verbs: [ "get", "update", "patch" ]
  - apiGroups: [ "" ]
    resources: [ "pods", "services", "configmaps" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "" ]
    resources: [ "events" ]
    verbs: [ "create", "patch", "update" ]
---
# Operator Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nimbusguard-operator
subjects:
  - kind: ServiceAccount
    name: nimbusguard-operator
    namespace: nimbusguard
roleRef:
  kind: ClusterRole
  name: nimbusguard-operator
  apiGroup: rbac.authorization.k8s.io
---
# Operator ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: operator-config
  namespace: nimbusguard
data:
  LOG_LEVEL: "INFO"
  METRICS_PORT: "8090"
  # KServe endpoint for Kubeflow integration - updated to working endpoint
  KSERVE_ENDPOINT: "http://nimbusguard-dqn-model-predictor.nimbusguard-serving.svc.cluster.local"
  # Whether to fallback to local model if KServe fails
  KUBEFLOW_FALLBACK_TO_LOCAL: "true"
---
# Note: PVC removed - using hostPath volume for local development
---
# Operator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nimbusguard-operator
  namespace: nimbusguard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nimbusguard-operator
  template:
    metadata:
      labels:
        app: nimbusguard-operator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: nimbusguard-operator
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      containers:
        - name: operator
          image: nimbusguard/nimbusguard-operator:latest
          livenessProbe:
            httpGet:
              path: /healthz
              port: 9080
          imagePullPolicy: Always
          ports:
            - containerPort: 9080
              name: health
            - containerPort: 8090
              name: metrics
          env:
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: operator-config
                  key: LOG_LEVEL
            - name: METRICS_PORT
              valueFrom:
                configMapKeyRef:
                  name: operator-config
                  key: METRICS_PORT
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: operator-secrets
                  key: openai_api_key
                  optional: true
            # KServe Integration for Kubeflow ML Pipeline
            - name: KSERVE_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: operator-config
                  key: KSERVE_ENDPOINT
            - name: KUBEFLOW_FALLBACK_TO_LOCAL
              valueFrom:
                configMapKeyRef:
                  name: operator-config
                  key: KUBEFLOW_FALLBACK_TO_LOCAL
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
# Operator Service
apiVersion: v1
kind: Service
metadata:
  name: nimbusguard-operator
  namespace: nimbusguard
spec:
  selector:
    app: nimbusguard-operator
  ports:
    - port: 9080
      targetPort: 9080
      name: health
