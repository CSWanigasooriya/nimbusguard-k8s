---
# Enhanced Prometheus configuration with DQN recording rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'nimbusguard'

    # Add recording rules for DQN feature computation
    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # Prometheus only scrapes itself - everything else comes via Alloy remote_write
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
        metrics_path: '/metrics'

---
# DQN-specific recording rules for efficient feature computation
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-dqn-rules
  namespace: monitoring
data:
  dqn-system-features.yml: |
    groups:
      - name: dqn_system_features
        interval: 15s
        rules:
          # System-level features for DQN (pre-computed for performance)
          - record: nimbusguard:cpu_usage_avg
            expr: avg(rate(container_cpu_usage_seconds_total{container!="POD",container!=""}[5m]))

          - record: nimbusguard:memory_usage_avg
            expr: avg(container_memory_usage_bytes{container!="POD",container!=""} / container_spec_memory_limit_bytes{container!="POD",container!=""})

          - record: nimbusguard:network_io_rate
            expr: sum(rate(container_network_receive_bytes_total[5m]) + rate(container_network_transmit_bytes_total[5m]))

          - record: nimbusguard:disk_io_rate
            expr: sum(rate(container_fs_reads_bytes_total[5m]) + rate(container_fs_writes_bytes_total[5m]))

          - record: nimbusguard:pod_readiness_ratio
            expr: sum(kube_pod_status_ready{condition="true"}) / sum(kube_pod_status_ready)

          - record: nimbusguard:pod_restart_rate
            expr: sum(rate(kube_pod_container_status_restarts_total[10m]))

          - record: nimbusguard:container_throttling
            expr: sum(rate(container_cpu_cfs_throttled_seconds_total[5m]))

          - record: nimbusguard:filesystem_usage_avg
            expr: avg(container_fs_usage_bytes{container!="POD",container!=""} / container_fs_limit_bytes{container!="POD",container!=""})

          - record: nimbusguard:load_average
            expr: avg(node_load1)

          - record: nimbusguard:node_resource_pressure
            expr: |
              avg(kube_node_status_condition{condition="MemoryPressure",status="true"}) +
              avg(kube_node_status_condition{condition="DiskPressure",status="true"})

  dqn-app-features.yml: |
    groups:
      - name: dqn_application_features
        interval: 15s
        rules:
          # Application-level features for DQN
          - record: nimbusguard:request_rate
            expr: sum(rate(http_requests_total[5m]))

          - record: nimbusguard:response_time_p50
            expr: histogram_quantile(0.5, rate(http_request_duration_seconds_bucket[5m]))

          - record: nimbusguard:response_time_p95
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))

          - record: nimbusguard:response_time_p99
            expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m]))

          - record: nimbusguard:error_rate
            expr: |
              sum(rate(http_requests_total{status=~"5.."}[5m])) /
              sum(rate(http_requests_total[5m]))

          - record: nimbusguard:throughput
            expr: sum(rate(http_requests_total[5m]))

          - record: nimbusguard:active_connections
            expr: sum(node_netstat_Tcp_CurrEstab)

          - record: nimbusguard:queue_size
            expr: sum(queue_size)

  dqn-ml-metrics.yml: |
    groups:
      - name: dqn_ml_metrics
        interval: 30s
        rules:
          # DQN agent performance metrics
          - record: nimbusguard:dqn_decision_confidence
            expr: dqn_decision_confidence_score

          - record: nimbusguard:dqn_health_score
            expr: observability_health_score

          - record: nimbusguard:dqn_feature_availability
            expr: feature_vector_completeness_ratio

          - record: nimbusguard:dqn_success_rate
            expr: |
              sum(rate(dqn_successful_decisions_total[5m])) /
              sum(rate(dqn_total_decisions_total[5m]))

          - record: nimbusguard:scaling_actions_per_minute
            expr: sum(rate(scaling_actions_total[1m])) * 60

          # Reward system metrics
          - record: nimbusguard:dqn_total_reward
            expr: dqn_total_reward_score

          - record: nimbusguard:dqn_performance_reward
            expr: dqn_performance_reward_component

          - record: nimbusguard:dqn_efficiency_reward
            expr: dqn_efficiency_reward_component

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v3.4.1
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus/'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=7d'  # Extended retention for DQN training
            - '--storage.tsdb.retention.size=10GB'  # Size-based retention
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
            - '--web.enable-remote-write-receiver'
            - '--log.level=info'
            - '--query.max-concurrency=20'  # Better performance for DQN queries
            - '--query.timeout=2m'
          ports:
            - containerPort: 9090
              name: web
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
            - name: prometheus-storage
              mountPath: /prometheus
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 2Gi
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 15
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-rules
          configMap:
            name: prometheus-dqn-rules
        - name: prometheus-storage
          emptyDir: { }
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: prometheus
  ports:
    - name: web
      port: 9090
      targetPort: 9090
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [ "" ]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: [ "get", "list", "watch" ]
  - nonResourceURLs: [ "/metrics" ]
    verbs: [ "get" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: monitoring